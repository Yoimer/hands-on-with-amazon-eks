1) ********************************************************** Create Cluster

cd scripts-by-chapter
./chapter-1.sh

or

cd hands-on-with-amazon-eks/Infrastructure/eksctl/01-initial-cluster
eksctl create cluster -f cluster.yaml

confirm nodes are running by typing:

kubectl get nodes

2) ********************************************************** Install AWS Load Balancer Controller

cd Infrastructure/k8s-tooling/load-balancer-controller

eksctl utils associate-iam-oidc-provider --region=us-east-1 --cluster=eks-acg

./create-irsa.sh

3) ********************************************************** Install app

cd Infrastructure/k8s-tooling/load-balancer-controller/test
./run.sh

Verify ALB listeners

Wait for the ALB deployment, and from copy the DNS and confirm ngnix runs

execute:
kubectl get pods -n kube-system

confirm pods names like aws-load-balancer-controller-*******

4) Create the ACM certificate
cd Infrastructure/cloudformation/ssl-certificate
./create.sh

Verify the ACM certificate is generated on AWS ACM

5) Add SSL certificate to the ALB
cd Infrastructure/k8s-tooling/load-balancer-controller/test
./run-with-ssl.sh

Verify ALB listeners, now it has HTTP 80 and HTTP 443 listener
HTTP80 will redirect to HTTP 443 automatically

On Route53 create record with name of sample-app (imperatibly has to be this name cos this is what was created on the ALB rule)

6) Create External DNS

cd Infrastructure/k8s-tooling/external-dns

./create-irsa.sh

Verify the external-dns-*** pod is running by executing

kubectl get pods

In case the pod shows crashloopbackoff error, proceed with the next:

kubectl logs external-dns-*** pod

if it shows a permission error, delete the pod (it shows redeploy and works well)

Check Route53

confirm the sample-app.******.domainname

sample-app.******.domainname should have https and show the ngnix server.

7) Install the Book Store application

Create dynamodb tables

Create development-clients dynamodb

cd /hands-on-with-amazon-eks/clients-api/infra/cloudformation

./create-dynamodb-table.sh development

Create development-inventory

cd /hands-on-with-amazon-eks/inventory-api/infra/cloudformation

./create-dynamodb-table.sh development

cd /hands-on-with-amazon-eks/renting-api/infra/cloudformation

./create-dynamodb-table.sh development

check dynamodb tables, it should show:

development-clients
development-inventory
development-renting
development-resources

8) Add AmazonDynamoDBFullAccess policy to the NodeInstanceRole on iam
