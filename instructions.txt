1) ********************************************************** Create Cluster

cd scripts-by-chapter
./chapter-1.sh

or

cd hands-on-with-amazon-eks/Infrastructure/eksctl/01-initial-cluster
eksctl create cluster -f cluster.yaml

2) ********************************************************** Install AWS Load Balancer Controller

cd Infrastructure/k8s-tooling/load-balancer-controller
./create.sh

On Cloudformation look for aws-load-balancer-iam-policy stack and copy the policy from the output, just like this:

Key = IamPolicyArn

Value = arn:aws:iam::395566946219:policy/aws-load-balancer-iam-policy-iamPolicy-eYfpeLLjFnki

The policy is aws-load-balancer-iam-policy-iamPolicy-eYfpeLLjFnki

On IAM look for the role that begins by eksctl-eks-acg-nodegroup-eks-node and attach the aws-load-balancer-iam-policy-iamPolicy-eYfpeLLjFnki policy

3) ********************************************************** Install app

cd Infrastructure/k8s-tooling/load-balancer-controller/test
./run.sh

Verify ALB listeners

Wait for the ALB deployment, and from copy the DNS and confirm ngnix runs

execute:
kubectl get pods -n kube-system

confirm pods names like aws-load-balancer-controller-*******

4) Create the ACM certificate
cd Infrastructure/cloudformation/ssl-certificate
./create.sh

Verify the ACM certificate is generated on AWS ACM

5) Add SSL certificate to the ALB
cd Infrastructure/k8s-tooling/load-balancer-controller/test
./run-with-ssl.sh

Verify ALB listeners, now it has HTTP 80 and HTTP 443 listener
HTTP80 will redirect to HTTP 443 automatically

On Route53 create record with name of sample-app (imperatibly has to be this name cos this is what was created on the ALB rule)

6) Create External DNS (this avoids the hassle of the manual work on creating record on Route53 as seen on 5)
delete sample-app record from Route53

cd Infrastructure/k8s-tooling/external-dns

Create IAM OIDC for the cluster (necessary to run create-irsa script)

eksctl utils associate-iam-oidc-provider --region=us-east-1 --cluster=eks-acg

./create-irsa.sh

Verify the external-dns-*** pod is running by executing

kubectl get pods

In case the pod shows crashloopbackoff error, proceed with the next:

kubectl logs external-dns-*** pod

if it shows a permission error, delete the pod (it shows redeploy and works well)
